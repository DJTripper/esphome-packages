esphome:
  comment: "Shelly 2.5"

esp8266:
  board: esp01_1m

i2c:
  sda: GPIO12
  scl: GPIO14

sensor:
  - platform: ade7953_i2c
    irq_pin: GPIO16 # Prevent overheating by setting this
    voltage:
      name: Spannung
      disabled_by_default: True
    # On the Shelly 2.5 channels are mixed ch1=B ch2=A
    current_a:
      name: ${channel_2} Stromstaerke
      internal: true
      disabled_by_default: True
    current_b:
      name: ${channel_1} Stromstaerke
      internal: true
      disabled_by_default: True
    active_power_a:
      name: ${channel_2} Leistung
      id: power_channel_2
      unit_of_measurement: W
      # active_power_a is normal, so don't multiply by -1
      on_value_range:
        - above: ${max_power}
          then:
            - light.turn_off: lightid2
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${friendly_name}
                data_template:
                  message: Light ${channel_1} turned off because power exceeded ${max_power}W
    active_power_b:
      name: ${channel_1} Leistung
      id: power_channel_1
      unit_of_measurement: W
      # active_power_b is inverted, so multiply by -1
      filters:
        - multiply: -1
      on_value_range:
        - above: ${max_power}
          then:
            - light.turn_off: lightid1
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${friendly_name}
                data_template:
                  message: Light ${channel_2} turned off because power exceeded ${max_power}W
    update_interval: 30s

  - platform: total_daily_energy
    name: ${channel_1} Tagesleistung
    power_id: power_channel_1
    filters:
      # Multiplication factor from Wh to kWh is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: total_daily_energy
    name: ${channel_2} Tagesleistung
    power_id: power_channel_2
    filters:
      # Multiplication factor from Wh to kWh is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  # NTC Temperature
  - platform: ntc
    sensor: temp_resistance_reading
    name: Temperatur
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - light.turn_off: lightid1
          - light.turn_off: lightid2
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${friendly_name}
              data_template:
                message: Switch ${friendly_name} turned off because temperature exceeded ${max_temp} °C
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
    disabled_by_default: True
  - platform: adc
    id: temp_analog_reading
    pin: A0
    disabled_by_default: True

output:
  - platform: gpio
    pin: GPIO4
    id: shelly_25_relay_1
  - platform: gpio
    pin: GPIO15
    id: shelly_25_relay_2

light:
  - platform: binary
    name: "${channel_1}"
    output: shelly_25_relay_1
    restore_mode: RESTORE_DEFAULT_OFF
    id: lightid1
  - platform: binary
    name: "${channel_2}"
    output: shelly_25_relay_2
    restore_mode: RESTORE_DEFAULT_OFF
    id: lightid2

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
    name: "${channel_1} Schalter"
    disabled_by_default: True
    on_press:
      then:
        if:
          condition:
            lambda: 'return ${doubleswitch};'
          then:
            - light.turn_on: lightid1
          else:
            - light.toggle: lightid1
    on_release:
      then:
        if:
          condition:
            lambda: 'return ${doubleswitch};'
          then:
            - light.turn_off: lightid1
          else:
            - light.toggle: lightid1
  - platform: gpio
    pin:
      number: GPIO5
    name: "${channel_2} Schalter"
    disabled_by_default: True
    on_press:
      then:
        if:
          condition:
            lambda: 'return ${doubleswitch};'
          then:
            - light.turn_on: lightid2
          else:
            - light.toggle: lightid2
    on_release:
      then:
        if:
          condition:
            lambda: 'return ${doubleswitch};'
          then:
            - light.turn_off: lightid2
          else:
            - light.toggle: lightid2